#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform sampler2D normalSampler;
uniform sampler2D specularSampler;

uniform vec3 lightColor[4];
uniform vec3 attenuation[4];
uniform float shineDamper;
uniform float reflectivity;

void main(void){

    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitVectorToCamera = normalize(toCameraVector);

    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);
	
	vec4 normalColor = texture(normalSampler, pass_textureCoords);
	vec4 specularColor = texture(specularSampler, pass_textureCoords);
	vec3 unitNormalMap = normalize(normalColor.rgb*2.0 - 1.0);

	
    for(int i = 0; i < 4; i++){
        float distance = length(toLightVector[i]);
        float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
        vec3 unitLightVector = normalize(toLightVector[i]);
        float nDot = dot(unitNormal , unitLightVector);
        float brightness = max(nDot, 0.3);
        vec3 lightDirection = -unitVectorToCamera;
        vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
        float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
        specularFactor = max(specularFactor, 0.0);
        float dampedFactor = pow(specularFactor, shineDamper);
        totalDiffuse = totalDiffuse + (brightness * lightColor[i])/attFactor;
        totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColor[i])/attFactor;
    }

    totalDiffuse = max(totalDiffuse, 0.0);
    totalSpecular = max(totalSpecular, 0.0);

    vec4 textureColor = texture(textureSampler, pass_textureCoords);
    if(textureColor.a<0.5){
        discard;
    }

    out_Color = (vec4(totalDiffuse, 1.0) *  (textureColor));
}
